import org.apache.tools.ant.taskdefs.condition.Os
import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.2'
    id 'io.spring.dependency-management' version '1.1.3'

    id 'org.openapi.generator' version '7.7.0'

    id 'jacoco'
}

jacoco {
    toolVersion = "0.8.11"
}

repositories {
    mavenCentral()
}

java {
    group = 'hei.school.demo'
    sourceCompatibility = '21'
    targetCompatibility = '21'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

test {
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
    useJUnitPlatform()
    finalizedBy jacocoTestCoverageVerification
}

jacocoTestCoverageVerification {
    dependsOn test
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "**/gen/**"
            ])
        }))
    }
    violationRules {
        rule {
            limit {
                counter = "LINE"
                minimum = 0
            }
        }
    }
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
    afterEvaluate {
        // Need to be duplicated like this from jacocoTestCoverageVerification,
        // else display coverageRate is inconsistent with what was computed during coverage...
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "**/gen/**"
            ])
        }))
    }
    doLast {
        def coverageReportFile = file("$rootDir/build/reports/jacoco/test/jacocoTestReport.xml")

        if (coverageReportFile.exists()) {
            def xmlParser = new XmlParser()
            xmlParser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false)
            xmlParser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)

            def xml = xmlParser.parse(coverageReportFile)

            def lineCounter = xml.'counter'.find { it.@type == 'LINE' }
            if (lineCounter != null) {
                def totalLines = lineCounter.@missed?.toInteger() + lineCounter.@covered?.toInteger() ?: 0
                def coveredLines = lineCounter.@covered?.toInteger() ?: 0
                if (totalLines > 0) {
                    def coverageRate = coveredLines / totalLines.toDouble() * 100
                    println "Total Line Coverage Rate: ${coverageRate.round(2)}%"
                } else {
                    println "No lines were covered or missed in the report."
                }
            } else {
                println "No LINE coverage counter found in the JaCoCo report."
            }
        } else {
            println "No JaCoCo coverage report found. Make sure you run 'gradle test jacocoTestReport' first."
        }
    }
}

dependencies {
    // Spring / Web / Thymeleaf / JDBC / Flyway / WebFlux
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'   // Thymeleaf
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'        // JdbcTemplate & DataSource auto-config
    implementation 'org.flywaydb:flyway-core'                                // Flyway
    implementation 'org.springframework.boot:spring-boot-starter-webflux'     // WebClient (non-blocking)

    // JSON / date-time
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

    // AWS / Lambda libs (kept from your original)
    implementation 'com.amazonaws.serverless:aws-serverless-java-container-springboot3:2.1.0'
    implementation 'software.amazon.awssdk:aws-query-protocol:2.20.26'
    implementation 'com.amazonaws:aws-lambda-java-core:1.2.3'
    implementation 'com.amazonaws:aws-lambda-java-events:3.11.3'
    implementation 'software.amazon.awssdk:sqs:2.21.40'
    implementation 'software.amazon.awssdk:eventbridge:2.21.40'
    implementation 'software.amazon.awssdk.crt:aws-crt:0.28.12'
    implementation 'software.amazon.awssdk:ses:2.21.40'
    implementation 'software.amazon.awssdk:core:2.21.40'

    // Mail / Tika / Reflections / Swagger
    implementation 'jakarta.mail:jakarta.mail-api:2.1.2'
    implementation 'jakarta.activation:jakarta.activation-api:2.1.2'
    implementation 'com.sun.mail:jakarta.mail:2.0.1'
    implementation 'com.sun.activation:jakarta.activation:2.0.1'
    implementation 'org.apache.tika:tika-core:2.9.1'
    implementation 'org.reflections:reflections:0.10.2'
    implementation 'org.openapitools:jackson-databind-nullable:0.2.6'
    implementation 'io.swagger:swagger-annotations:1.6.12'

    // OpenAPI generator
    // (kept the openapi plugin in plugins block; tasks can be configured separately if needed)

    // PostgreSQL driver
    implementation "org.postgresql:postgresql:42.7.5"

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.testcontainers:junit-jupiter:1.19.1'
    testImplementation 'org.junit-pioneer:junit-pioneer:2.2.0'
}

// ===== Fix pour bootRun : choisir la MainClass explicitement =====
tasks.named('bootRun', org.springframework.boot.gradle.tasks.run.BootRun) {
    // Remplace par la classe que tu veux lancer
    mainClass.set('hei.school.demo.TsinjoApplication')
    // Si tu veux fournir le profile par défaut ici, tu peux décommenter la ligne suivante :
    // args = ['--spring.profiles.active=preprod']
}
